#!/usr/bin/env sh

greeter() {

	clear

	cat <<EOF
	 _       _                         
  __| | ___ | |_ _ __ ___   __ _ _ __  
 / _\` |/ _ \\| __| '_ \` _ \ / _\` | '_ \ 
| (_| | (_) | |_| | | | | | (_| | | | |
 \__,_|\___/ \__|_| |_| |_|\__,_|_| |_|
EOF

}

# Logs
LOG_DIR="$HOME/.log/dotfiles/$(date +"%d-%m-%Y-%H:%M:%S")/"
mkdir -p "$LOG_DIR"
CACHE="$HOME/.cache/dotfiles"
mkdir -p "$CACHE"


install_repo_packages() {

	# Find best mirrors
	sudo pacman -S --noconfirm --needed reflector
	sudo reflector --latest 200 --protocol http --protocol https --sort rate --save /etc/pacman.d/mirrorlist

	# Update
	sudo pacman -Syu --noconfirm

	# Packages
	FONTS="otf-ipafont noto-fonts-emoji gnu-free-fonts ttf-arphic-uming ttf-indic-otf ttf-joypixels ttf-font-awesome ttf-dejavu ttf-inconsolata"
	UTILS="neovim qutebrowser telegram-desktop htop mpd ncmpcpp rofi transmission-cli vlc zsh youtube-dl grc curl wget xclip figlet w3m vifm feh alsa-utils tmux networkmanager maim fzf exfat-utils fuse2 udiskie udisks2 imagemagick i3lock-color man pacman-contrib ncdu mpc neomutt bc clipmenu xdotool"
	WM="dunst bspwm sxhkd picom xorg-server xorg-xinit xorg-xsetroot papirus-icon-theme"
	DEV="python-pip yarn gradle ccls eslint flake8 shellcheck prettier python-black hub git"

	sudo pacman -S --noconfirm --needed $FONTS $UTILS $WM $DEV

}

install_yay() {
	cd "$CACHE" || exit
	git clone https://aur.archlinux.org/yay.git
	cd yay || exit
	makepkg -si --noconfirm
}

install_aur_packages() {

	# Install yay when isn't installed
	[[ $(which yay) == "yay not found" ]] && install_yay

	# Packages
	UTILS="minecraft-launcher polybar checkupdates+aur cli-visualizer mimeo"
	DEV="clang-format-linter-git github-cli ktlint"

	yay -S --noconfirm --needed "$UTILS $DEV" 

}

install_pypi_packages() {

	# Packages
	PKGS="pynvim msgpack grip virtualenv virtualenvwrapper pipx python-language-server"
	pip3 install --user -U "$PKGS" 

}

install_npm_packages() {

	# NPM
	NPM="typescript typescript-language-server nvm"
	yarn global add "$NPM" 

}

install_st() {
	cd "$CACHE" || exit
	rm -rf st
	git clone https://github.com/samedamci/st
	cd st || exit
	sudo make clean install
}

install_dmenu() {
	cd "$CACHE"	|| exit
	rm -rf dmenu
	git clone https://github.com/samedamci/dmenu
	cd dmenu || exit
	sudo make clean install
}

configure_pacman() {
	su root -c "cat >/etc/pacman.conf <<EOF

# /etc/pacman.conf

# See the pacman.conf(5) manpage for option and repository directives

# GENERAL OPTIONS
	
[options]
# The following paths are commented out with their default values listed.
# If you wish to use different paths, uncomment and update the paths.
#RootDir     = /
#DBPath      = /var/lib/pacman/
#CacheDir    = /var/cache/pacman/pkg/
#LogFile     = /var/log/pacman.log
#GPGDir      = /etc/pacman.d/gnupg/
#HookDir     = /etc/pacman.d/hooks/
HoldPkg     = pacman glibc
#XferCommand = /usr/bin/curl -L -C - -f -o %o %u
#XferCommand = /usr/bin/wget --passive-ftp -c -O %o %u
#CleanMethod = KeepInstalled
Architecture = auto

# Pacman won't upgrade packages listed in IgnorePkg and members of IgnoreGroup
#IgnorePkg   =
#IgnoreGroup =

#NoUpgrade   =
#NoExtract   =

# Misc options
#UseSyslog
Color
ILoveCandy
TotalDownload
CheckSpace
VerbosePkgLists

# By default, pacman accepts packages signed by keys that its local keyring
# trusts (see pacman-key and its man page), as well as unsigned packages.
SigLevel    = Required DatabaseOptional
LocalFileSigLevel = Optional
#RemoteFileSigLevel = Required

#[testing]
#Include = /etc/pacman.d/mirrorlist

[core]
Include = /etc/pacman.d/mirrorlist

[extra]
Include = /etc/pacman.d/mirrorlist

#[community-testing]
#Include = /etc/pacman.d/mirrorlist

[community]
Include = /etc/pacman.d/mirrorlist

#[multilib-testing]
#Include = /etc/pacman.d/mirrorlist

#[multilib]
#Include = /etc/pacman.d/mirrorlist
	
EOF"
}

configure_udiskie() {

	sudo mkdir /media

	su root -c "echo 'ENV{ID_FS_USAGE}==\"filesystem|other|crypto\", ENV{UDISKS_FILESYSTEM_SHARED}=\"1\"' > /etc/udev/rules.d/99-udisks2.rules && echo 'D /media 0755 root root 0 -' > /etc/tmpfiles.d/media.conf"

}

copy_configs() {

	# .config dir
	cd ~/Dotfiles/botfiles/.config || exit

	cp -r * ~/.config/

	if [ "$HOSTNAME" = "pc" ]; then
		echo "Use pc config..."
		mv ~/.config/polybar/config.pc ~/.config/polybar/config
		mv ~/.config/sxhkd/sxhkdrc.pc ~/.config/sxhkd/sxhkdrc
	elif [ "$HOSTNAME" = "laptop" ]; then
		echo "Use laptop config..."
		mv ~/.config/polybar/config.laptop ~/.config/polybar/config
		mv ~/.config/sxhkd/sxhkdrc.laptop ~/.config/sxhkd/sxhkdrc
	fi

	rm -rf ~/.config/sxhkd/sxhkdrc.*
	rm -rf ~/.config/polybar/config.*

	# Telegram bindings
	cd ~/Dotfiles/botfiles || exit
	mkdir -p ~/.local/share/TelegramDesktop/tdata/
	cp shortcuts-custom.json ~/.local/share/TelegramDesktop/tdata

	# Configs in home dir
	cp .zshrc .bash_profile .bashrc .profile .shellrc .zprofile .Xresources .xinitrc ~/

	# Scripts
	cp -r .scripts/* ~/.scripts
	cd ~/.scripts/ || exit
	rm -rf rofi-keepassxc
	git clone https://github.com/samedamci/rofi-keepassxc
	rm -rf mpdmenu
	git clone https://github.com/samedamci/mpdmenu
	rm -rf rofi-todo
	git clone https://github.com/samedamci/rofi-todo
	rm -rf kaomoji-rofi
	git clone https://gitlab.com/ceda_ei/kaomoji-rofi
	chmod +x ~/.scripts/*

	# Zsh plugins
	cd ~/.config/zsh || exit
	rm -rf plugins
	mkdir plugins
	cd plugins || exit

	git clone https://github.com/zsh-users/zsh-syntax-highlighting
	git clone https://github.com/zsh-users/zsh-autosuggestions

}

sudo -v
greeter

printf "\nDo you want to install packages from repo? (y/n): "; read CHOICE

if [ "$CHOICE" = "Y" ] || [ "$CHOICE" = "y" ]; then
	echo "Installing repo packages"; install_repo_packages &>$LOG_DIR/install_repo_packages.log
fi

greeter

printf "\nDo you want to install packages from AUR? (y/n): "; read CHOICE
if [ "$CHOICE" = "Y" ] || [ "$CHOICE" = "y" ]; then
	echo "Installing AUR packages"; install_aur_packages &>$LOG_DIR/install_aur_packages.log
fi

greeter

printf "\nDo you want to install packages from PyPI? (y/n): "; read CHOICE
if [ "$CHOICE" = "Y" ] || [ "$CHOICE" = "y" ]; then
	echo "Installing PyPI packages"; install_pypi_packages &>$LOG_DIR/install_pypi_packages.log
fi

greeter

printf "\nDo you want to install packages from NPM? (y/n): "; read CHOICE
if [ "$CHOICE" = "Y" ] || [ "$CHOICE" = "y" ]; then
	echo "Installing NPM packages"; install_npm_packages &>$LOG_DIR/install_npm_packages.log
fi

greeter

printf "\nDo you want to build and install st fork? (y/n): "; read CHOICE
if [ "$CHOICE" = "Y" ] || [ "$CHOICE" = "y" ]; then
	echo "Installing st..."; install_st &>$LOG_DIR/install_st.log
fi

greeter

printf "\nDo you want to build and install dmenu fork? (y/n): "; read CHOICE
if [ "$CHOICE" = "Y" ] || [ "$CHOICE" = "y" ]; then
	echo "Installing dmenu..."; install_dmenu &>/$LOG_DIR/install_dmenu.log
fi

greeter

printf "\nDo you want to configure pacman? (y/n): "; read CHOICE
if [ "$CHOICE" = "Y" ] || [ "$CHOICE" = "y" ]; then
	echo "Configuring pacman..."; configure_pacman 
fi

greeter

printf "\nDo you want to configure udiskie? (y/n): "; read CHOICE
if [ "$CHOICE" = "Y" ] || [ "$CHOICE" = "y" ]; then
	echo "Configuring udiskie..."; configure_udiskie 
fi

greeter

printf "\nDo you want to copy configs? (y/n): "; read CHOICE
if [ "$CHOICE" = "Y" ] || [ "$CHOICE" = "y" ]; then 
	printf "Moving configs..." 
	copy_configs &>$LOG_DIR/copy_configs.log
	printf "\n"
	chsh -s /usr/bin/zsh
fi

clear
